
@attrFont1: HelveticaNeue-Medium 14;
@attrColor1: lighten(#ffffff, 0%);
@attrFont2: HelveticaNeue-Medium 15;
@attrColor2: rgb(0,0,0);
@numericalConstant: 42;
@mathExpressionConstant: 10 ** (3 - 1);

.simple {
    alpha: 1;
    autoresizingMask: width height left right top bottom;
    clipsToBounds: YES;
    contentMode: bottomRight;
    text: "Text:";
    title: Title;
    prompt: 'Prompt';
    searchTextPositionAdjustment: offset(1, 2);
    contentSize: size(3, 4);
    contentInset: insets(10, 20, 30, 40);
    center: point(5, 6);
    frame: rect(1,2,3,4);
    bounds: size(10,20);
    color: rgb(128, 128, 128);
    tintColor: #ffffff;
    titleColor(selectedHighlighted): blue;
    textColor: rgba(64, 64, 64, 0.5);
    shadowColor: red;
    transform: rotate(10) scale(20,30) translate(40,50);
    attributedText: "text" (font: HelveticaNeue-Medium 12, backgroundColor: rgb(0,0,255), color: darken(#000000, 0%), baselineOffset: 10, strokeColor: yellow, strokeWidth: 1.0);
    attributedTitle: "title1" (font: @attrFont1, foregroundColor: @attrColor1), "title2" (font: @attrFont2, foregroundColor: @attrColor2);
}

.localizedStrings {
    text: L("Text");
    title: localized('Title');
    attributedText: L("text1") (font: HelveticaNeue-Medium 12) L("-text2") (font: HelveticaNeue-Medium 12);
}

.prefixes {
    cornerRadius: 5;
    layer.borderWidth: 10;
    imageView.alpha: 0.42;
    contentView.alpha: 0.42;
    backgroundView.alpha: 0.42;
    selectedBackgroundView.alpha: 0.42;
    multipleSelectionBackgroundView.alpha: 0.42;
    titleLabel.alpha: 0.42;
    textLabel.alpha: 0.42;
    detailTextLabel.alpha: 0.42;
    inputView.alpha: 0.42;
    inputAccessoryView.alpha: 0.42;
    tableHeaderView.alpha: 0.42;
    tableFooterView.alpha: 0.42;
}

.point1 {
    center: parent(50, -50);
}

.point2 {
    center: window(50, -50);
}


.rect1 { // Parent insets
    frame: parent(10, 10); // dx/dy inset
    bounds: parent(10, 20, 30, 40); // top, left, bottom, right inset
}

.rect2 { // Window insets
    frame: window(10, 10); // dx/dy inset
    bounds: window(10, 20, 30, 40); // top, left, bottom, right inset
}

.rect3 { // Parent relative size
    frame: size(10%, 20%).left(10).top(20);
    bounds: size(30%, 40%).right(30).bottom(40);
}

.rect4 { // Automatic sizes with parent relative insets/positioning
    frame: size(auto, auto).left(10%).top(20%);
    bounds: left(50%).right(5).top(0);
}

.rect5 { // Automatic sizes with parent relative insets/positioning
    frame: size(auto, auto).insets(10%, 20%, 30%, 40%);
    bounds: size(auto, auto).top(10%).left(20%).bottom(30%).right(40%);
}


@font1: HelveticaNeue-Medium 14;
.font1 {
    font: @font1;
}
.font2 {
    font: bigger(@font1, 1);
}
.font3 {
    font: smaller(@font1, 1);
}
.font4 {
    font: fontWithSize(@font1, 10);
}
.font5 {
    font: HelveticaNeue-Medium 5;
}
.font6 {
    font: "Times New Roman" 5;
}
.font7 {
    font: 'Times New Roman' 5;
}


.image1 {
    image: image.png;
    backgroundImage: "image.png";
    shadowImage: 'image.png';
    progressImage: image(image.png);
    trackImage: image("image.png");
    highlightedImage: image('image.png');
    onImage: image(image.png, 1, 2);
    offImage: image(image.png, 1, 2, 3, 4);
}

.colorFunctions {
    color: lighten(rgb(17, 34, 51), 50%);
    titleColor: darken(#112233, 50%);
    textColor: saturate(rgb(17, 34, 51), 50%);
    tintColor: desaturate(#112233, 50%);
    shadowColor: fadein(rgb(17, 34, 51), 50%);
    sectionIndexColor: fadeout(#112233, 50%);
    separatorColor: saturate(fadeout(rgb(17, 34, 51), 50%), 50%);
}

.imageColorFunctions {
    image: lighten(#112233, 50%);
    backgroundImage: saturate(fadeout(#112233, 50%), 50%);
}

.fullEnumNames {
    autoresizingMask: UIViewAutoresizingFlexibleWidth;
    lineBreakMode: NSLineBreakByWordWrapping;
    titleColor(UIControlStateSelected): red;
}


.numericExpressions {
    hidden: 2 > 1;
    alpha: 2 * 3 - (2*2.5 + 0.5);
    cornerRadius: @numericalConstant + @mathExpressionConstant;
    contentSize: size(@numericalConstant, @mathExpressionConstant);
}


.layoutParentRelative1 {
    layout: size(100, 100), center(parent, parent.centerY - 100); // Using implicit centerX attribute...
}
.layoutParentRelative2 {
    layout: size(2 * parent.width, parent.height + 100), left(100), top(100);
}

.layoutElementRelative1 {
    layout: size(100, 100), right(elementFoo), bottom(elementFoo.top - 100); // Using implicit left attribute...
}
.layoutElementRelative2 {
    layout: size(elementFoo.width, 2 * elementFoo.height + 100), left(elementFoo.right), top(elementFoo.bottom - 100);
}

.layoutParentSizeToFit1 {
    layout: sizeToFit(100, 100), left(parent.right), top(parent.bottom + 100);
}
.layoutParentSizeToFit2 {
    layout: sizeToFit(parent.width * 2, 2 * parent.height + 100), right(3 * parent.left), bottom(guide.bottom);
}

.layoutImplicitAttributes1 {
    layout: size(elementFoo, 2 * elementFoo + 100), center(elementFoo, elementFoo - 100);
}
.layoutImplicitAttributes2 {
    layout: size(elementFoo, elementFoo * 2 + 100), topLeft(elementFoo, elementFoo);
}
.layoutImplicitAttributes3 {
    layout: size(elementFoo, 2 * elementFoo + 100), topRight(elementFoo, elementFoo);
}
.layoutImplicitAttributes4 {
    layout: size(elementFoo, elementFoo * 2 + 100), bottomLeft(elementFoo, elementFoo);
}
.layoutImplicitAttributes5 {
    layout: size(elementFoo, 2 * elementFoo + 100), bottomRight(elementFoo, elementFoo);
}
